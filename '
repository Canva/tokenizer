package normalizer_test

import (
	"reflect"
	// "strings"
	"testing"
	// "unicode"

	// "golang.org/x/text/transform"
	// "golang.org/x/text/unicode/norm"

	"github.com/sugarme/tokenizer/normalizer"
)

func TestNormalized_NewNormalizedFrom(t *testing.T) {
	gotN := normalizer.NewNormalizedFrom("élégant")
	gotN.NFD()

	want := []normalizer.Alignment{
		{0, 1},
		{0, 1},
		{1, 2},
		{2, 3},
		{2, 3},
		{3, 4},
		{4, 5},
		{5, 6},
		{6, 7},
	}
	got := gotN.Get().Alignments

	if !reflect.DeepEqual(want, got) {
		t.Errorf("Want: %v\n", want)
		t.Errorf("Got: %v\n", got)
	}
}

// Unchanged: Remove accents - Mark, nonspacing (Mn)
func TestNormalized_RemoveAccents(t *testing.T) {
	gotN := normalizer.NewNormalizedFrom("élégant")
	gotN.RemoveAccents()

	want := []normalizer.Alignment{
		{0, 1},
		{1, 2},
		{2, 3},
		{3, 4},
		{4, 5},
		{5, 6},
		{6, 7},
	}
	got := gotN.Get().Alignments

	if !reflect.DeepEqual(want, got) {
		t.Errorf("Want: %v\n", want)
		t.Errorf("Got: %v\n", got)
	}
}

// Removed Chars
func TestNormalized_Filter(t *testing.T) {
	gotN := normalizer.NewNormalizedFrom("élégant")

	gotN.Filter('n')

	want := []normalizer.Alignment{
		{0, 1},
		{1, 2},
		{2, 3},
		{3, 4},
		{4, 5},
		{6, 7},
	}
	got := gotN.Get().Alignments

	if !reflect.DeepEqual(want, got) {
		t.Errorf("Want: %v\n", want)
		t.Errorf("Got: %v\n", got)
	}
}

// Mixed addition and removal
func TestNormalized_Mixed(t *testing.T) {
	gotN := normalizer.NewNormalizedFrom("élégant")

	gotN.RemoveAccents()
	gotN.Filter('n')

	want := []normalizer.Alignment{
		{0, 1},
		{1, 2},
		{2, 3},
		{3, 4},
		{4, 5},
		{6, 7},
	}
	got := gotN.Get().Alignments

	if !reflect.DeepEqual(want, got) {
		t.Errorf("Want: %v\n", want)
		t.Errorf("Got: %v\n", got)
	}
}

// Range and Conversion
func TestNormalized_RangeConversion(t *testing.T) {
	gotN := normalizer.NewNormalizedFrom("    __Hello__   ")

	gotN.Filter(' ')
	gotN.Lowercase()

	want := []normalizer.Alignment{
		{0, 1},
		{1, 2},
		{2, 3},
		{3, 4},
		{4, 5},
		{6, 7},
	}
	got := gotN.Get().Alignments

	if !reflect.DeepEqual(want, got) {
		t.Errorf("Want: %v\n", want)
		t.Errorf("Got: %v\n", got)
	}
}
